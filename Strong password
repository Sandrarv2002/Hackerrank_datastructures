#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'minimumNumber' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER n
#  2. STRING password
#

def minimumNumber(n, password):
    # Return the minimum number of characters to make the password strong
    required = {
            'lower': 0,
            'upper': 0,
            'digit': 0,
            'special': 0
    }
    
    # Special characters defined as per the problem's assumption
    special_characters = "!@#$%^&*()-+"

    # Check each character in the password
    for char in password:
        if char.islower():
            required['lower'] = 1
        elif char.isupper():
            required['upper'] = 1
        elif char.isdigit():
            required['digit'] = 1
        elif char in special_characters:
            required['special'] = 1

    # Count missing character types
    missing_types = 4 - sum(required.values())

    # Ensure password length is at least 6
    return max(missing_types, 6 - n)
        
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    password = input()

    answer = minimumNumber(n, password)

    fptr.write(str(answer) + '\n')

    fptr.close()
